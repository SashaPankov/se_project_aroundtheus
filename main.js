!function(){"use strict";const e=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers,this._spinner=document.querySelector(".spinner")}_sendRequest(e,t){return fetch(`${this._baseUrl}${e}`,t).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}getInitialCards(){return this._sendRequest("/cards",{method:"GET",headers:this._headers})}getUserInfo(){return this._sendRequest("/users/me",{method:"GET",headers:this._headers})}updateUserInfo(e){return this._sendRequest("/users/me",{method:"PATCH",body:JSON.stringify(e),headers:this._headers})}changeAvatar(e){return this._sendRequest("/users/me/avatar",{method:"PATCH",body:JSON.stringify(e),headers:this._headers})}addCard(e){return this._sendRequest("/cards",{method:"POST",body:JSON.stringify(e),headers:this._headers})}deleteCard(e){return this._sendRequest(`/cards/${e._id}`,{method:"DELETE",headers:this._headers})}likeCard(e){return this._sendRequest(`/cards/${e._id}/likes`,{method:"PUT",headers:this._headers})}dislikeCard(e){return this._sendRequest(`/cards/${e._id}/likes`,{method:"DELETE",headers:this._headers})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"25ffaa89-09a6-4b6f-aa28-dd4c48c6dd4d","Content-Type":"application/json"}});class t{constructor(e,t){let{data:r,handleCardClick:s,handleDeleteCardClick:i}=e;this._id=r._id,this._name=r.name,this._imageLink=r.link,this._isLiked=r.isLiked,this._handleCardClick=s,this._handleDeleteCardClick=i,this._cardSelector=t}_setEventListeners(){this._cardLikeElement.addEventListener("click",(()=>{this._changeLike()})),this._cardDeleteElement.addEventListener("click",(()=>{this._handleDeleteCardClick(this)})),this._cardImageElement.addEventListener("click",(()=>{this._handleCardClick(this)}))}_changeLike(){this._cardLikeElement.classList.toggle("card__like-button_active"),this._cardLikeElement.classList.contains("card__like-button_active")?e.likeCard(this.getCardData()):e.dislikeCard(this.getCardData())}_getCardTemplate(){return console.log(`#${this._cardSelector}`),document.querySelector(`#${this._cardSelector}`).content.querySelector(".card").cloneNode(!0)}getCardElement(){return this._cardElement=this._getCardTemplate(),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardTitleElement=this._cardElement.querySelector(".card__title"),this._cardImageElement.src=this._imageLink,this._cardImageElement.alt=this._name,this._cardTitleElement.textContent=this._name,this._cardLikeElement=this._cardElement.querySelector(".card__like-button"),this._cardDeleteElement=this._cardElement.querySelector(".card__delete-button"),this._setEventListeners(),this._isLiked&&this._cardLikeElement.classList.add("card__like-button_active"),this._cardElement}getCardData(){return{_id:this._id,link:this._imageLink,name:this._name}}deleteCard(){this._cardElement.remove(),this._cardElement=null}}const r={formSelector:".modal__form",inputSelector:".modal__field",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__field_error",errorClass:"modal__field-error_visible",cardSelector:"card-template",cardsContainer:".cards__list",imageSelector:".modal__image",cardTitleSelector:".modal__card-title",profileNameSelector:".profile__title",profileDescriptionSelector:".profile__description",profileAvatarSelector:".profile__image",profileEditButtonSelector:"#profile-edit-button",profileTitleInputSelector:"#profile-title-input",profileDescriptionInputSelector:"#profile-description-input",profileEditForm:"profile-edit-form",cardAddButtonSelector:"#profile-add-button",cardAddForm:"card-add-form",cardTitleInputSelector:"#card-title-input",cardImageURLInputSelector:"#card-imageURL-input",popupImageSelector:"image-view-modal",popupProfileSelector:"profile-edit-modal",popupAddCardSelector:"card-add-modal",popupDeleteCardSelector:"card-delete-modal",popupChangeAvatarSelector:"profile-change-avatar-link",buttonCloseSelector:".modal__close"},s={},i=document.querySelector(r.profileEditButtonSelector),n=document.forms[r.profileEditForm],a=document.querySelector(r.cardAddButtonSelector),o=document.forms[r.cardAddForm],l=[...document.querySelectorAll(r.formSelector)];class d{constructor(e,t){this._config=e,this._formElement=t,this._inputList=[...this._formElement.querySelectorAll(this._config.inputSelector)],this._buttonElement=this._formElement.querySelector(this._config.submitButtonSelector)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);void 0!==t&&(e.classList.add(this._config.inputErrorClass),t.classList.add(this._config.errorClass),t.textContent=e.validationMessage)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);void 0!==t&&(e.classList.remove(this._config.inputErrorClass),t.classList.remove(this._config.errorClass),t.textContent="")}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_disableButton(){this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0}_enableButton(){this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this._disableButton():this._enableButton()}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._setEventListeners(),this._disableButton()}resetValidation(){this._inputList.forEach((e=>this._hideInputError(e))),this._disableButton()}areInputsEmpty(){return this._inputList.every((e=>0===e.value.length))}}class c{constructor(e,t){let{items:r,renderer:s}=e;this._renderedItems=r,this._renderer=s,this._container=document.querySelector(t)}addItem(e){arguments.length>1&&void 0!==arguments[1]&&!arguments[1]?this._container.prepend(e):this._container.append(e)}clear(){this._container.innerHTML=""}renderItems(){this.clear(),this._renderedItems.forEach((e=>{this._renderer(e)}))}}class h{constructor(e){this._popup=document.querySelector(`#${e}`),this._handleEscClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.querySelector(".modal__close").addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("mousedown",(e=>{e.target.classList.contains("modal_opened")&&this.close()}))}}class _ extends h{constructor(e,t){super(e),this._modalForm=this._popup.querySelector(r.formSelector),this._handleFormSubmit=t,this._inputs=[...this._modalForm.querySelectorAll(r.inputSelector)],this._buttonSave=this._modalForm.querySelector(r.submitButtonSelector),this._selfButtonCaption=this._buttonSave.textContent}close(){this._modalForm.reset(),super.close()}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.getAttribute("name")]=t.value})),e}setInputValues(e){this._inputs.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._modalForm.addEventListener("submit",(()=>{this._handleFormSubmit(this._getInputValues())}))}notifyUserSaving(e){this._buttonSave.textContent=e?"Saving...":this._selfButtonCaption}}let u=null,m=null;const p=e=>new t({data:e,handleCardClick:f,handleDeleteCardClick:E},r.cardSelector).getCardElement(),f=e=>{S.open(e.getCardData())},E=e=>{L.setInputValues(e.getCardData()),m=e,L.open()};i.addEventListener("click",(()=>{g.setInputValues(v.getUserInfo()),s[n.getAttribute("name")].resetValidation(),g.open()})),a.addEventListener("click",(()=>{s[o.getAttribute("name")].resetValidation(),C.open()}));const v=new class{constructor(e,t){let{profileNameSelector:r,profileDescriptionSelector:s,profileAvatarSelector:i}=e;this._profileTitle=document.querySelector(r),this._profileDescription=document.querySelector(s),this._profileAvatar=document.querySelector(i),this._handleChangeAvatarClick=t,this._setEventListeners()}_setEventListeners(){this._profileAvatar.addEventListener("click",(()=>{this._handleChangeAvatarClick(this)}))}getUserInfo(){return{name:this._profileTitle.textContent,about:this._profileDescription.textContent,avatar:this._profileAvatar.src}}setUserInfo(e){this._profileTitle.textContent=e.name,this._profileDescription.textContent=e.about,"avatar"in e&&(this._profileAvatar.src=e.avatar)}}(r,(e=>{b.setInputValues(e.getUserInfo()),b.open()})),S=new class extends h{constructor(e){super(e),this._modalImage=this._popup.querySelector(r.imageSelector),this._modalCardTitle=this._popup.querySelector(r.cardTitleSelector)}open(e){let{link:t,name:r}=e;this._modalImage.src=t,this._modalImage.alt=r,this._modalCardTitle.textContent=r,super.open()}}(r.popupImageSelector);S.setEventListeners();const g=new _(r.popupProfileSelector,(t=>{v.setUserInfo(t),g.notifyUserSaving(!0),e.updateUserInfo(t).finally((()=>{g.notifyUserSaving(!1),g.close()}))}));g.setEventListeners();const C=new _(r.popupAddCardSelector,(t=>{C.notifyUserSaving(!0),e.addCard(t).then((e=>{t._id=e._id,cardDara.isLiked=!1;const r=p(t);u.addItem(r,!1)})).finally((()=>{C.notifyUserSaving(!1),C.close()}))}));C.setEventListeners();const L=new _(r.popupDeleteCardSelector,(t=>{e.deleteCard(t).finally((()=>{L.close(),m.deleteCard(),m=null}))}));L.setEventListeners();const b=new _(r.popupChangeAvatarSelector,(t=>{b.notifyUserSaving(!0),e.changeAvatar(t).finally((()=>{b.notifyUserSaving(!0),b.close();const e=v.getUserInfo();e.avatar=t.avatar,v.setUserInfo(e)}))}));b.setEventListeners(),e.getUserInfo().then((e=>{v.setUserInfo(e)})),e.getInitialCards().then((e=>{u=new c({items:e,renderer:e=>{u.addItem(p(e))}},r.cardsContainer),u.renderItems()})),(e=>{l.forEach((t=>{if(t.addEventListener("submit",(e=>{e.preventDefault()})),"card-delete-confirm-form"!==t.getAttribute("name")){const r=new d(e,t);s[t.getAttribute("name")]=r,r.enableValidation()}}))})(r)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,